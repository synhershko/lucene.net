<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lucene.Net.Contrib.Analyzers</name>
    </assembly>
    <members>
        <member name="T:Lucene.Net.Analysis.WordlistLoader">
            <summary>
            Loads a text file and adds every line as an entry to a Hashtable. Every line
            should contain only one word. If the file is not found or on any error, an
            empty table is returned.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.WordlistLoader.GetWordtable(System.String,System.String)">
            <summary>
            Load words table from the file
            </summary>
            <param name="path">Path to the wordlist</param>
            <param name="wordfile">Name of the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.WordlistLoader.GetWordtable(System.String)">
            <summary>
            Load words table from the file
            </summary>
            <param name="wordfile">Complete path to the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.WordlistLoader.GetWordtable(System.IO.FileInfo)">
            <summary>
            Load words table from the file 
            </summary>
            <param name="wordfile">File containing the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.WordlistLoader.GetWordtable(System.IO.TextReader)">
            <summary>
            Reads lines from a Reader and adds every line as an entry to a HashSet (omitting
            leading and trailing whitespace). Every line of the Reader should contain only
            one word. The words need to be in lowercase if you make use of an
            Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
            </summary>
            <param name="reader">Reader containing the wordlist</param>
            <returns>A Hashtable with the reader's words</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.WordlistLoader.MakeWordTable(System.String[],System.Int32)">
            <summary>
            Builds the wordlist table.
            </summary>
            <param name="words">Word that where read</param>
            <param name="length">Amount of words that where read into <tt>words</tt></param>
            <returns></returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Fr.FrenchAnalyzer">
            <summary>
            Analyzer for french language. Supports an external list of stopwords (words that
            will not be indexed at all) and an external list of exclusions (word that will
            not be stemmed, but indexed).
            A default set of stopwords is used unless an other list is specified, the
            exclusionlist is empty by default.
            
            <author>Patrick Talbot (based on Gerhard Schwarz work for German)</author>
            <version>$Id: FrenchAnalyzer.java,v 1.9 2004/10/17 11:41:40 dnaber Exp $</version>
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchAnalyzer.FRENCH_STOP_WORDS">
            <summary>
            Extended list of typical french stopwords.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchAnalyzer.stoptable">
            <summary>
            Contains the stopwords used with the StopFilter.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchAnalyzer.excltable">
            <summary>
            Contains words that should be indexed but not stemmed.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.#ctor">
            <summary>
            Builds an analyzer.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.#ctor(System.String[])">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.#ctor(System.Collections.Hashtable)">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.#ctor(System.IO.FileInfo)">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.SetStemExclusionTable(System.String[])">
            <summary>
            Builds an exclusionlist from an array of Strings.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.SetStemExclusionTable(System.Collections.Hashtable)">
            <summary>
            Builds an exclusionlist from a Hashtable.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.SetStemExclusionTable(System.IO.FileInfo)">
            <summary>
            Builds an exclusionlist from the words contained in the given file.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided Reader.
            </summary>
            <returns>
            A TokenStream build from a StandardTokenizer filtered with
            	StandardFilter, StopFilter, FrenchStemFilter and LowerCaseFilter
            </returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Cz.CzechAnalyzer">
            <summary>
            Analyzer for Czech language. Supports an external list of stopwords (words that
            will not be indexed at all).
            A default set of stopwords is used unless an alternative list is specified, the
            exclusion list is empty by default.
            
            <author>Lukas Zapletal [lzap@root.cz]</author>
            <version>$Id: CzechAnalyzer.java,v 1.2 2003/01/22 20:54:47 ehatcher Exp $</version>
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Cz.CzechAnalyzer.STOP_WORDS">
            <summary>
            List of typical stopwords.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Cz.CzechAnalyzer.stoptable">
            <summary>
            Contains the stopwords used with the StopFilter.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Cz.CzechAnalyzer.#ctor">
            <summary>
            Builds an analyzer.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Cz.CzechAnalyzer.#ctor(System.String[])">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Cz.CzechAnalyzer.#ctor(System.Collections.Hashtable)">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Cz.CzechAnalyzer.#ctor(System.IO.FileInfo)">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Cz.CzechAnalyzer.LoadStopWords(System.IO.Stream,System.String)">
            <summary>
            Loads stopwords hash from resource stream (file, database...).
            </summary>
            <param name="wordfile">File containing the wordlist</param>
            <param name="encoding">Encoding used (win-1250, iso-8859-2, ...}, null for default system encoding</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Cz.CzechAnalyzer.TokenStream(System.String,System.IO.TextReader)" -->
        <member name="F:Lucene.Net.Analysis.BR.BrazilianStemFilter.stemmer">
            The actual token in the input stream.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemFilter.Next(Lucene.Net.Analysis.Token)">
            @return Returns the next token in the stream, or null at EOS.
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianAnalyzer.BRAZILIAN_STOP_WORDS">
            List of typical Brazilian stopwords.
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianAnalyzer.stoptable">
            Contains the stopwords used with the StopFilter.
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianAnalyzer.excltable">
            Contains words that should be indexed but not stemmed.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor">
            Builds an analyzer with the default stop words ({@link #BRAZILIAN_STOP_WORDS}).
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor(System.String[])">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor(System.Collections.Hashtable)">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.#ctor(System.IO.FileInfo)">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.SetStemExclusionTable(System.String[])">
            Builds an exclusionlist from an array of Strings.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.SetStemExclusionTable(System.Collections.Hashtable)">
            Builds an exclusionlist from a Hashtable.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.SetStemExclusionTable(System.IO.FileInfo)">
            Builds an exclusionlist from the words contained in the given file.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianAnalyzer.TokenStream(System.String,System.IO.TextReader)">
             Creates a TokenStream which tokenizes all the text in the provided Reader.
            
             @return  A TokenStream build from a StandardTokenizer filtered with
             			StandardFilter, StopFilter, GermanStemFilter and LowerCaseFilter.
        </member>
        <member name="T:Lucene.Net.Analysis.Cn.ChineseAnalyzer">
            <summary>
            Title: ChineseAnalyzer
            Description:
              Subclass of org.apache.lucene.analysis.Analyzer
              build from a ChineseTokenizer, filtered with ChineseFilter.
            Copyright:   Copyright (c) 2001
            Company:
            <author>Yiyi Sun</author>
            <version>$Id: ChineseAnalyzer.java, v 1.2 2003/01/22 20:54:47 ehatcher Exp $</version>
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Cn.ChineseAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided Reader.
            </summary>
            <returns>A TokenStream build from a ChineseTokenizer filtered with ChineseFilter.</returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Ru.RussianStemFilter">
            <summary>
            A filter that stems Russian words. The implementation was inspired by GermanStemFilter.
            The input should be filtered by RussianLowerCaseFilter before passing it to RussianStemFilter,
            because RussianStemFilter only works  with lowercase part of any "russian" charset.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianStemFilter.token">
            <summary>
            The actual token in the input stream.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemFilter.Next">
            <summary>
            
            </summary>
            <returns>Returns the next token in the stream, or null at EOS</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemFilter.SetStemmer(Lucene.Net.Analysis.Ru.RussianStemmer)">
            <summary>
            Set a alternative/custom RussianStemmer for this filter.
            </summary>
            <param name="stemmer"></param>
        </member>
        <member name="T:Lucene.Net.Analysis.Fr.FrenchStemFilter">
            <summary>
            A filter that stemms french words. It supports a table of words that should
            not be stemmed at all. The used stemmer can be changed at runtime after the
            filter object is created (as long as it is a FrenchStemmer).
            
            <author>Patrick Talbot (based on Gerhard Schwarz work for German)</author>
            <version>$Id: FrenchAnalyzer.java,v 1.2 2004/01/23 20:54:47 ehatcher Exp $</version>
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemFilter.token">
            <summary>
            The actual token in the input stream.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemFilter.#ctor(Lucene.Net.Analysis.TokenStream,System.Collections.Hashtable)">
            <summary>
            Builds a FrenchStemFilter that uses an exclusiontable.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemFilter.Next">
            <summary>
            Returns the next token in the stream, or null at EOS
            </summary>
            <returns>
            Returns the next token in the stream, or null at EOS
            </returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemFilter.SetStemmer(Lucene.Net.Analysis.Fr.FrenchStemmer)">
            <summary>
            Set a alternative/custom FrenchStemmer for this filter.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemFilter.SetExclusionTable(System.Collections.Hashtable)">
            <summary>
            Set an alternative exclusion list for this filter.
            </summary>
        </member>
        <member name="T:Lucene.Net.Analysis.De.WordlistLoader">
            <summary>
            Loads a text file and adds every line as an entry to a Hashtable. Every line
            should contain only one word. If the file is not found or on any error, an
            empty table is returned.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.De.WordlistLoader.GetWordtable(System.String,System.String)">
            <summary>
            </summary>
            <param name="path">Path to the wordlist</param>
            <param name="wordfile">Name of the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.De.WordlistLoader.GetWordtable(System.String)">
            <summary>
            </summary>
            <param name="wordfile">Complete path to the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.De.WordlistLoader.GetWordtable(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="wordfile">File containing the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.De.WordlistLoader.MakeWordTable(System.String[],System.Int32)">
            <summary>
            Builds the wordlist table.
            </summary>
            <param name="words">Word that where read</param>
            <param name="length">Amount of words that where read into <tt>words</tt></param>
            <returns></returns>
        </member>
        <member name="T:Lucene.Net.Analysis.De.GermanAnalyzer">
            <summary>
            Analyzer for German language. Supports an external list of stopwords (words that
            will not be indexed at all) and an external list of exclusions (word that will
            not be stemmed, but indexed).
            A default set of stopwords is used unless an alternative list is specified, the
            exclusion list is empty by default.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.De.GermanAnalyzer.GERMAN_STOP_WORDS">
            <summary>
            List of typical german stopwords.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.De.GermanAnalyzer.stoptable">
            <summary>
            Contains the stopwords used with the StopFilter. 
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.De.GermanAnalyzer.excltable">
            <summary>
            Contains words that should be indexed but not stemmed. 
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.#ctor">
            <summary>
            Builds an analyzer. 
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.#ctor(System.String[])">
            <summary>
            Builds an analyzer with the given stop words. 
            </summary>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.#ctor(System.Collections.Hashtable)">
            <summary>
            Builds an analyzer with the given stop words. 
            </summary>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.#ctor(System.IO.FileInfo)">
            <summary>
            Builds an analyzer with the given stop words. 
            </summary>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.SetStemExclusionTable(System.String[])">
            <summary>
            Builds an exclusionlist from an array of Strings. 
            </summary>
            <param name="exclusionlist"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.SetStemExclusionTable(System.Collections.Hashtable)">
            <summary>
            Builds an exclusionlist from a Hashtable. 
            </summary>
            <param name="exclusionlist"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.SetStemExclusionTable(System.IO.FileInfo)">
            <summary>
            Builds an exclusionlist from the words contained in the given file. 
            </summary>
            <param name="exclusionlist"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided TextReader. 
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns>A TokenStream build from a StandardTokenizer filtered with StandardFilter, StopFilter, GermanStemFilter</returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Cn.ChineseFilter">
            <summary>
            Title: ChineseFilter
            Description: Filter with a stop word table
                         Rule: No digital is allowed.
                               English word/token should larger than 1 character.
                               One Chinese character as one Chinese word.
            TO DO:
              1. Add Chinese stop words, such as \ue400
              2. Dictionary based Chinese word extraction
              3. Intelligent Chinese word extraction
            
            Copyright:    Copyright (c) 2001
            Company:
            <author>Yiyi Sun</author>
            <version>$Id: ChineseFilter.java, v 1.4 2003/01/23 12:49:33 ehatcher Exp $</version>
            </summary>
        </member>
        <member name="T:Lucene.Net.Analysis.Ru.RussianCharsets">
            <summary>
            RussianCharsets class contains encodings schemes (charsets) and ToLowerCase() method implementation
            for russian characters in Unicode, KOI8 and CP1252.
            Each encoding scheme contains lowercase (positions 0-31) and uppercase (position 32-63) characters.
            One should be able to add other encoding schemes (like ISO-8859-5 or customized) by adding a new charset
            and adding logic to ToLowerCase() method for that charset.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianCharsets.UnicodeRussian">
            <summary>
            Unicode Russian charset (lowercase letters only)
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianCharsets.KOI8">
            <summary>
            KOI8 charset
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianCharsets.CP1251">
            <summary>
            CP1251 Charset
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.CJK.CJKTokenizer" -->
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.MAX_WORD_LEN">
            <summary>
            Max word length
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.IO_BUFFER_SIZE">
            <summary>
            buffer size
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.offset">
            <summary>
            word offset, used to imply which character(in ) is parsed
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.bufferIndex">
            <summary>
            the index used only for ioBuffer
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.dataLen">
            <summary>
            data length
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Lucene.Net.Analysis.CJK.CJKTokenizer.buffer" -->
        <!-- Badly formed XML comment ignored for member "F:Lucene.Net.Analysis.CJK.CJKTokenizer.ioBuffer" -->
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.tokenType">
            <summary>
            word type: single=>ASCII  double=>non-ASCII word=>default 
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKTokenizer.preIsTokened">
            <summary>
            tag: previous character is a cached double-byte character  "C1C2C3C4"
            ----(set the C1 isTokened) C1C2 "C2C3C4" ----(set the C2 isTokened)
            C1C2 C2C3 "C3C4" ----(set the C3 isTokened) "C1C2 C2C3 C3C4"
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.CJK.CJKTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Construct a token stream processing the given input.
            </summary>
            <param name="_in">I/O reader</param>
        </member>
        <member name="M:Lucene.Net.Analysis.CJK.CJKTokenizer.Next">
            <summary>
             Returns the next token in the stream, or null at EOS.
            </summary>
            <returns>Token</returns>
        </member>
        <member name="T:Lucene.Net.Analysis.AR.ArabicLetterTokenizer">
             Tokenizer that breaks text into runs of letters and diacritics.
             <p>
             The problem with the standard Letter tokenizer is that it fails on diacritics.
             Handling similar to this is necessary for Indic Scripts, Hebrew, Thaana, etc.
             </p>
            
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicLetterTokenizer.IsTokenChar(System.Char)">
            Allows for Letter category or NonspacingMark category
            @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(char)
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.AR.ArabicAnalyzer" -->
        <member name="F:Lucene.Net.Analysis.AR.ArabicAnalyzer.DEFAULT_STOPWORD_FILE">
            File containing default Arabic stopwords.
            
            Default stopword list is from http://members.unine.ch/jacques.savoy/clef/index.html
            The stopword list is BSD-Licensed.
        </member>
        <member name="F:Lucene.Net.Analysis.AR.ArabicAnalyzer.stoptable">
            Contains the stopwords used with the StopFilter.
        </member>
        <member name="F:Lucene.Net.Analysis.AR.ArabicAnalyzer.STOPWORDS_COMMENT">
            The comment character in the stopwords file.  All lines prefixed with this will be ignored  
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor">
             Builds an analyzer with the default stop words: {@link #DEFAULT_STOPWORD_FILE}.
            
             @deprecated Use {@link #ArabicAnalyzer(Version)} instead
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(Lucene.Net.Util.Version)">
            Builds an analyzer with the default stop words: {@link #DEFAULT_STOPWORD_FILE}.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(System.String[])">
             Builds an analyzer with the given stop words.
            
             @deprecated Use {@link #ArabicAnalyzer(Version, String[])} instead
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(Lucene.Net.Util.Version,System.String[])">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(System.Collections.Hashtable)">
             Builds an analyzer with the given stop words.
            
             @deprecated Use {@link #ArabicAnalyzer(Version, Hashtable)} instead
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.#ctor(Lucene.Net.Util.Version,System.Collections.Hashtable)">
            Builds an analyzer with the given stop words.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.TokenStream(System.String,System.IO.TextReader)">
             Creates a {@link TokenStream} which tokenizes all the text in the provided {@link Reader}.
            
             @return  A {@link TokenStream} built from an {@link ArabicLetterTokenizer} filtered with
             			{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
                        and {@link ArabicStemFilter}.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
             Returns a (possibly reused) {@link TokenStream} which tokenizes all the text 
             in the provided {@link Reader}.
            
             @return  A {@link TokenStream} built from an {@link ArabicLetterTokenizer} filtered with
                        {@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}
                        and {@link ArabicStemFilter}.
        </member>
        <member name="T:Lucene.Net.Analysis.Nl.DutchAnalyzer">
            <summary>
            Analyzer for Dutch language. Supports an external list of stopwords (words that
            will not be indexed at all), an external list of exclusions (word that will
            not be stemmed, but indexed) and an external list of word-stem pairs that overrule
            the algorithm (dictionary stemming).
            A default set of stopwords is used unless an alternative list is specified, the
            exclusion list is empty by default.
            As start for the Analyzer the German Analyzer was used. The stemming algorithm
            implemented can be found at <c cref="!:"></c>
            
            <version>$Id: DutchAnalyzer.java,v 1.1 2004/03/09 14:55:08 otis Exp $</version>
            </summary>
            <author>Edwin de Jonge</author>
        </member>
        <member name="F:Lucene.Net.Analysis.Nl.DutchAnalyzer.DUTCH_STOP_WORDS">
            <summary>
            List of typical german stopwords.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Nl.DutchAnalyzer.stoptable">
            <summary>
            Contains the stopwords used with the StopFilter. 
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Nl.DutchAnalyzer.excltable">
            <summary>
            Contains words that should be indexed but not stemmed. 
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.#ctor">
            <summary>
            Builds an analyzer. 
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.#ctor(System.String[])">
            <summary>
            Builds an analyzer with the given stop words. 
            </summary>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.#ctor(System.Collections.Hashtable)">
            <summary>
            Builds an analyzer with the given stop words. 
            </summary>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.#ctor(System.IO.FileInfo)">
            <summary>
            Builds an analyzer with the given stop words. 
            </summary>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.SetStemExclusionTable(System.String[])">
            <summary>
            Builds an exclusionlist from an array of Strings. 
            </summary>
            <param name="exclusionlist"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.SetStemExclusionTable(System.Collections.Hashtable)">
            <summary>
            Builds an exclusionlist from a Hashtable. 
            </summary>
            <param name="exclusionlist"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.SetStemExclusionTable(System.IO.FileInfo)">
            <summary>
            Builds an exclusionlist from the words contained in the given file. 
            </summary>
            <param name="exclusionlist"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.SetStemDictionary(System.IO.FileInfo)">
            <summary>
            Reads a stemdictionary file , that overrules the stemming algorithm
            This is a textfile that contains per line
            word\tstem
            i.e: tabseperated
            </summary>
            <param name="stemdict"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided TextReader. 
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns>A TokenStream build from a StandardTokenizer filtered with StandardFilter, StopFilter, GermanStemFilter</returns>
        </member>
        <member name="F:Lucene.Net.Analysis.BR.BrazilianStemmer.TERM">
            Changed term
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.Stem(System.String)">
             Stemms the given term to an unique <tt>discriminator</tt>.
            
             @param term  The term that should be stemmed.
             @return      Discriminator for <tt>term</tt>
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.isStemmable(System.String)">
             Checks a term if it can be processed correctly.
            
             @return  true if, and only if, the given term consists in letters.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.isIndexable(System.String)">
             Checks a term if it can be processed indexed.
            
             @return  true if it can be indexed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.isVowel(System.Char)">
                     * See if string is 'a','e','i','o','u'
                   *
                   * @return true if is vowel
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.getR1(System.String)">
                     * Gets R1
                   *
                   * R1 - is the region after the first non-vowel follwing a vowel,
                   *      or is the null region at the end of the word if there is
                   *      no such non-vowel.
                   *
                   * @return null or a string representing R1
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.getRV(System.String)">
                     * Gets RV
                   *
                   * RV - IF the second letter is a consoant, RV is the region after
                   *      the next following vowel,
                   *
                   *      OR if the first two letters are vowels, RV is the region
                   *      after the next consoant,
                   *
                   *      AND otherwise (consoant-vowel case) RV is the region after
                   *      the third letter.
                   *
                   *      BUT RV is the end of the word if this positions cannot be
                   *      found.
                   *
                   * @return null or a string representing RV
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.changeTerm(System.String)">
             1) Turn to lowercase
             2) Remove accents
             3) ã -> a ; õ -> o
             4) ç -> c
            
             @return null or a string transformed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.suffix(System.String,System.String)">
             Check if a string ends with a suffix
            
             @return true if the string ends with the specified suffix
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.replaceSuffix(System.String,System.String,System.String)">
             Replace a string suffix by another
            
             @return the replaced string
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.removeSuffix(System.String,System.String)">
             Remove a string suffix
            
             @return the string without the suffix
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.suffixPreceded(System.String,System.String,System.String)">
             See if a suffix is preceded by a string
            
             @return true if the suffix is preceded
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.createCT(System.String)">
            Creates CT (changed term) , substituting * 'ã' and 'õ' for 'a~' and 'o~'.
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step1">
                     * Standart suffix removal.
                   * Search for the longest among the following suffixes, and perform
                   * the following actions:
                   *
                   * @return false if no ending was removed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step2">
                     * Verb suffixes.
                   *
                   * Search for the longest among the following suffixes in RV,
                   * and if found, delete.
                   *
                   * @return false if no ending was removed
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step3">
                     * Delete suffix 'i' if in RV and preceded by 'c'
                   *
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step4">
                     * Residual suffix
                   *
                   * If the word ends with one of the suffixes (os a i o á í ó)
                   * in RV, delete it
                   *
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.step5">
                     * If the word ends with one of ( e é ê) in RV,delete it,
                   * and if preceded by 'gu' (or 'ci') with the 'u' (or 'i') in RV,
                   * delete the 'u' (or 'i')
                   *
                   * Or if the word ends ç remove the cedilha
                   *
        </member>
        <member name="M:Lucene.Net.Analysis.BR.BrazilianStemmer.Log">
             For log and debug purpose
            
             @return  TERM, CT, RV, R1 and R2
        </member>
        <member name="T:Lucene.Net.Analysis.Nl.WordlistLoader">
            <summary>
            Loads a text file and adds every line as an entry to a Hashtable. Every line
            should contain only one word. If the file is not found or on any error, an
            empty table is returned.
            
            <version>$Id: WordListLoader.java,v 1.1 2004/03/09 14:55:08 otis Exp $</version>
            </summary>
            <author>Gerhard Schwarz</author>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.WordlistLoader.GetWordtable(System.String,System.String)">
            <param name="path">Path to the wordlist</param>
            <param name="wordfile">Name of the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.WordlistLoader.GetWordtable(System.String)">
            <param name="wordfile">Complete path to the wordlist</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.WordlistLoader.GetStemDict(System.IO.FileInfo)">
            <summary>
            Reads a stemsdictionary. Each line contains: 
            word \t stem 
            (i.e. tab seperated)
            </summary>
            <param name="wordstemfile"></param>
            <returns>Stem dictionary that overrules, the stemming algorithm</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.WordlistLoader.GetWordtable(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="wordfile">File containing the wordlist</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.WordlistLoader.MakeWordTable(System.String[],System.Int32)">
            <summary>
            Builds the wordlist table.
            </summary>
            <param name="words">Word that where read</param>
            <param name="length">Amount of words that where read into <tt>words</tt></param>
            <returns></returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Nl.DutchStemFilter">
            <summary>
            A filter that stems Dutch words. It supports a table of words that should
            not be stemmed at all. The stemmer used can be changed at runtime after the
            filter object is created (as long as it is a DutchStemmer).
            
            <version>$Id: DutchStemFilter.java,v 1.1 2004/03/09 14:55:08 otis Exp $</version>
            </summary>
            <author>Edwin de Jonge</author>
        </member>
        <member name="F:Lucene.Net.Analysis.Nl.DutchStemFilter.token">
            <summary>
            The actual token in the input stream.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemFilter.#ctor(Lucene.Net.Analysis.TokenStream,System.Collections.Hashtable)">
            <summary>
            Builds a DutchStemFilter that uses an exclusiontable. 
            </summary>
            <param name="_in"></param>
            <param name="exclusiontable"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemFilter.#ctor(Lucene.Net.Analysis.TokenStream,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="_in"></param>
            <param name="exclusiontable"></param>
            <param name="stemdictionary">Dictionary of word stem pairs, that overrule the algorithm</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemFilter.Next">
            <summary>
            </summary>
            <returns>Returns the next token in the stream, or null at EOS</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemFilter.SetStemmer(Lucene.Net.Analysis.Nl.DutchStemmer)">
            <summary>
            Set a alternative/custom DutchStemmer for this filter. 
            </summary>
            <param name="stemmer"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemFilter.SetExclusionTable(System.Collections.Hashtable)">
            <summary>
            Set an alternative exclusion list for this filter. 
            </summary>
            <param name="exclusiontable"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemFilter.SetStemDictionary(System.Collections.Hashtable)">
            <summary>
            Set dictionary for stemming, this dictionary overrules the algorithm,
            so you can correct for a particular unwanted word-stem pair.
            </summary>
            <param name="dict"></param>
        </member>
        <member name="T:Lucene.Net.Analysis.Fr.FrenchStemmer">
            <summary>
            A stemmer for French words. The algorithm is based on the work of
            Dr Martin Porter on his snowball project<br/>
            refer to http://snowball.sourceforge.net/french/stemmer.html<br/>
            (French stemming algorithm) for details
            
            <author>Patrick Talbot (based on Gerhard Schwarz work for German)</author>
            <version>$Id: FrenchStemmer.java,v 1.2 2004/01/22 20:54:47 ehatcher Exp $</version>
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.sb">
            <summary>
            Buffer for the terms while stemming them.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.tb">
            <summary>
            A temporary buffer, used to reconstruct R2
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.R0">
            <summary>
            Region R0 is equal to the whole buffer
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.RV">
            <summary>
            Region RV
            "If the word begins with two vowels, RV is the region after the third letter,
            otherwise the region after the first vowel not at the beginning of the word,
            or the end of the word if these positions cannot be found."
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.R1">
            <summary>
            Region R1
            "R1 is the region after the first non-vowel following a vowel
            or is the null region at the end of the word if there is no such non-vowel"
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.R2">
            <summary>
            Region R2
            "R2 is the region after the first non-vowel in R1 following a vowel
            or is the null region at the end of the word if there is no such non-vowel"
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.suite">
            <summary>
            Set to true if we need to perform step 2
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Fr.FrenchStemmer.modified">
            <summary>
            Set to true if the buffer was modified
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.Stem(System.String)">
            <summary>
            Stemms the given term to a unique <tt>discriminator</tt>.
            </summary>
            <param name="term">
            java.langString The term that should be stemmed
            </param>
            <returns>
            Discriminator for <tt>term</tt>
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.SetStrings" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step1" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step2a" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step2b" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step3" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step4" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step5" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.Step6" -->
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.DeleteFromIfPrecededIn(System.String,System.String[],System.String,System.String)">
            <summary>
            Delete a suffix searched in zone "source" if zone "from" contains prefix + search string
            </summary>
            <param name="source">the primary source zone for search</param>
            <param name="search">the strings to search for suppression</param>
            <param name="from">the secondary source zone for search</param>
            <param name="prefix">the prefix to add to the search string to test</param>
            <returns>true if modified</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.DeleteFromIfTestVowelBeforeIn(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            Delete a suffix searched in zone "source" if the preceding letter is (or isn't) a vowel
            </summary>
            <param name="source">the primary source zone for search</param>
            <param name="search">the strings to search for suppression</param>
            <param name="vowel">true if we need a vowel before the search string</param>
            <param name="from">the secondary source zone for search (where vowel could be)</param>
            <returns>true if modified</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.DeleteButSuffixFrom(System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Delete a suffix searched in zone "source" if preceded by the prefix
            </summary>
            <param name="source">the primary source zone for search</param>
            <param name="search">the strings to search for suppression</param>
            <param name="prefix">the prefix to add to the search string to test</param>
            <param name="without">true if it will be deleted even without prefix found</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.DeleteButSuffixFromElseReplace(System.String,System.String[],System.String,System.Boolean,System.String,System.String)" -->
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.ReplaceFrom(System.String,System.String[],System.String)">
            <summary>
            Replace a search string with another within the source zone
            </summary>
            <param name="source">the source zone for search</param>
            <param name="search">the strings to search for replacement</param>
            <param name="replace">the replacement string</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.DeleteFrom(System.String,System.String[])">
            <summary>
            Delete a search string within the source zone
            </summary>
            <param name="source">the source zone for search</param>
            <param name="suffix">the strings to search for suppression</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.IsVowel(System.Char)">
            <summary>
            Test if a char is a french vowel, including accentuated ones
            </summary>
            <param name="ch">the char to test</param>
            <returns>true if the char is a vowel</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.RetrieveR(System.Text.StringBuilder)" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.RetrieveRV(System.Text.StringBuilder)" -->
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.Fr.FrenchStemmer.TreatVowels(System.Text.StringBuilder)" -->
        <member name="M:Lucene.Net.Analysis.Fr.FrenchStemmer.IsStemmable(System.String)">
            <summary>
            Checks a term if it can be processed correctly.
            </summary>
            <returns>true if, and only if, the given term consists in letters.</returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Ru.RussianLowerCaseFilter">
            <summary>
            Normalizes token text to lower case, analyzing given ("russian") charset.
            </summary>
        </member>
        <member name="T:Lucene.Net.Analysis.AR.ArabicStemFilter">
            A {@link TokenFilter} that applies {@link ArabicStemmer} to stem Arabic words..
            
        </member>
        <member name="T:Lucene.Net.Analysis.Nl.DutchStemmer">
            <summary>
            A stemmer for Dutch words. The algorithm is an implementation of
            the <see c="http://snowball.tartarus.org/dutch/stemmer.html">dutch stemming</see>
            algorithm in snowball. Snowball is a project of Martin Porter (does Porter Stemmer ring a bell?): 
            
            @version   $Id: DutchStemmer.java,v 1.1 2004/03/09 14:55:08 otis Exp $
            </summary>
            <author>Edwin de Jonge (ejne@cbs.nl)</author>
        </member>
        <member name="F:Lucene.Net.Analysis.Nl.DutchStemmer.sb">
            <summary>
            Buffer for the terms while stemming them. 
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.Stem(System.String)">
            <summary>
            Stemms the given term to an unique <tt>discriminator</tt>.
            </summary>
            <param name="term">The term that should be stemmed.</param>
            <returns>Discriminator for <tt>term</tt></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.Step2(System.Text.StringBuilder)">
            <summary>
            Delete suffix e if in R1 and 
            preceded by a non-vowel, and then undouble the ending
            </summary>
            <param name="sb">string being stemmed</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.Step3a(System.Text.StringBuilder)">
            <summary>
            Delete "heid"
            </summary>
            <param name="sb">string being stemmed</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.Step3b(System.Text.StringBuilder)">
            <summary>
            <p>A d-suffix, or derivational suffix, enables a new word, 
            often with a different grammatical category, or with a different 
            sense, to be built from another word. Whether a d-suffix can be 
            attached is discovered not from the rules of grammar, but by 
            referring to a dictionary. So in English, ness can be added to 
            certain adjectives to form corresponding nouns (littleness, 
            kindness, foolishness ...) but not to all adjectives 
            (not for example, to big, cruel, wise ...) d-suffixes can be 
            used to change meaning, often in rather exotic ways.</p>
            Remove "ing", "end", "ig", "lijk", "baar" and "bar"
            </summary>
            <param name="sb">string being stemmed</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.Step4(System.Text.StringBuilder)">
            <summary>
            undouble vowel 
            If the words ends CVD, where C is a non-vowel, D is a non-vowel other than I, and V is double a, e, o or u, remove one of the vowels from V (for example, maan -> man, brood -> brod). 
            </summary>
            <param name="sb">string being stemmed</param>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.IsStemmable(System.String)">
            <summary>
            Checks if a term could be stemmed.
            </summary>
            <param name="term"></param>
            <returns>true if, and only if, the given term consists in letters.</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Nl.DutchStemmer.Substitute(System.Text.StringBuilder)">
            <summary>
            Substitute ä, ë, ï, ö, ü, á , é, í, ó, ú
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Lucene.Net.Analysis.De.GermanStemFilter">
            <summary>
            A filter that stems German words. It supports a table of words that should
            not be stemmed at all. The stemmer used can be changed at runtime after the
            filter object is created (as long as it is a GermanStemmer).
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.De.GermanStemFilter.token">
            <summary>
            The actual token in the input stream.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemFilter.#ctor(Lucene.Net.Analysis.TokenStream,System.Collections.Hashtable)">
            <summary>
            Builds a GermanStemFilter that uses an exclusiontable. 
            </summary>
            <param name="_in"></param>
            <param name="exclusiontable"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemFilter.Next">
            <summary>
            </summary>
            <returns>Returns the next token in the stream, or null at EOS</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemFilter.SetStemmer(Lucene.Net.Analysis.De.GermanStemmer)">
            <summary>
            Set a alternative/custom GermanStemmer for this filter. 
            </summary>
            <param name="stemmer"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemFilter.SetExclusionTable(System.Collections.Hashtable)">
            <summary>
            Set an alternative exclusion list for this filter. 
            </summary>
            <param name="exclusiontable"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.AR.ArabicStemmer" -->
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.Stem(System.Char[],System.Int32)">
            Stem an input buffer of Arabic text.
            
            @param s input buffer
            @param len length of input buffer
            @return length of input buffer after normalization
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.StemPrefix(System.Char[],System.Int32)">
            Stem a prefix off an Arabic word.
            @param s input buffer
            @param len length of input buffer
            @return new length of input buffer after stemming.
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.StemSuffix(System.Char[],System.Int32)">
            Stem suffix(es) off an Arabic word.
            @param s input buffer
            @param len length of input buffer
            @return new length of input buffer after stemming
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.StartsWith(System.Char[],System.Int32,System.Char[])">
            Returns true if the prefix matches and can be stemmed
            @param s input buffer
            @param len length of input buffer
            @param prefix prefix to check
            @return true if the prefix matches and can be stemmed
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.EndsWith(System.Char[],System.Int32,System.Char[])">
            Returns true if the suffix matches and can be stemmed
            @param s input buffer
            @param len length of input buffer
            @param suffix suffix to check
            @return true if the suffix matches and can be stemmed
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.DeleteN(System.Char[],System.Int32,System.Int32,System.Int32)">
            Delete n characters in-place
            
            @param s Input Buffer
            @param pos Position of character to delete
            @param len Length of input buffer
            @param nChars number of characters to delete
            @return length of input buffer after deletion
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicStemmer.Delete(System.Char[],System.Int32,System.Int32)">
            Delete a character in-place
            
            @param s Input Buffer
            @param pos Position of character to delete
            @param len length of input buffer
            @return length of input buffer after deletion
        </member>
        <member name="T:Lucene.Net.Analysis.Ru.RussianStemmer">
            <summary>
            Russian stemming algorithm implementation (see http://snowball.sourceforge.net for detailed description).
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianStemmer.RV">
            <summary>
            positions of RV, R1 and R2 respectively
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianStemmer.R1">
            <summary>
            positions of RV, R1 and R2 respectively
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianStemmer.R2">
            <summary>
            positions of RV, R1 and R2 respectively
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianStemmer.A">
            <summary>
            letters
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianStemmer.vowels">
            <summary>
            stem definitions
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.#ctor">
            <summary>
            RussianStemmer constructor comment.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.#ctor(System.Char[])">
            <summary>
            RussianStemmer constructor comment.
            </summary>
            <param name="charset"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Adjectival(System.Text.StringBuilder)">
            <summary>
            Adjectival ending is an adjective ending,
            optionally preceded by participle ending.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Derivational(System.Text.StringBuilder)">
            <summary>
            Derivational endings
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.FindEnding(System.Text.StringBuilder,System.Int32,System.Char[][])">
            <summary>
            Finds ending among given ending class and returns the length of ending found(0, if not found).
            Creation date: (17/03/2002 8:18:34 PM)
            </summary>
            <param name="stemmingZone"></param>
            <param name="startIndex"></param>
            <param name="theEndingClass"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.FindAndRemoveEnding(System.Text.StringBuilder,System.Char[][])">
            <summary>
            Finds the ending among the given class of endings and removes it from stemming zone.
            Creation date: (17/03/2002 8:18:34 PM)
            </summary>
            <param name="stemmingZone"></param>
            <param name="theEndingClass"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.FindAndRemoveEnding(System.Text.StringBuilder,System.Char[][],System.Char[][])">
            <summary>
            Finds the ending among the given class of endings, then checks if this ending was
            preceded by any of given predessors, and if so, removes it from stemming zone.
            Creation date: (17/03/2002 8:18:34 PM)
            </summary>
            <param name="stemmingZone"></param>
            <param name="theEndingClass"></param>
            <param name="thePredessors"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.MarkPositions(System.String)">
            <summary>
            Marks positions of RV, R1 and R2 in a given word.
            Creation date: (16/03/2002 3:40:11 PM)
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.IsVowel(System.Char)">
            <summary>
            Checks if character is a vowel..
            Creation date: (16/03/2002 10:47:03 PM)
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Noun(System.Text.StringBuilder)">
            <summary>
            Noun endings.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.PerfectiveGerund(System.Text.StringBuilder)">
            <summary>
            Perfective gerund endings.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Reflexive(System.Text.StringBuilder)">
            <summary>
            Reflexive endings.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.RemoveI(System.Text.StringBuilder)">
            <summary>
            Insert the method's description here.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.RemoveSoft(System.Text.StringBuilder)">
            <summary>
            Insert the method's description here.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.SetCharset(System.Char[])">
            <summary>
            Insert the method's description here.
            Creation date: (16/03/2002 10:58:42 PM)
            </summary>
            <param name="newCharset"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Stem(System.String)">
            <summary>
            Finds the stem for given Russian word.
            Creation date: (16/03/2002 3:36:48 PM)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Superlative(System.Text.StringBuilder)">
            <summary>
            Superlative endings.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.UndoubleN(System.Text.StringBuilder)">
            <summary>
            Undoubles N.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Verb(System.Text.StringBuilder)">
            <summary>
            Verb endings.
            Creation date: (17/03/2002 12:14:58 AM)
            </summary>
            <param name="stemmingZone"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianStemmer.Stem(System.String,System.Char[])">
            <summary>
            Static method for stemming with different charsets
            </summary>
            <param name="theWord"></param>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="T:Lucene.Net.Analysis.Ru.RussianAnalyzer">
            <summary>
            Analyzer for Russian language. Supports an external list of stopwords (words that
            will not be indexed at all).
            A default set of stopwords is used unless an alternative list is specified.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianAnalyzer.RUSSIAN_STOP_WORDS">
            <summary>
            List of typical Russian stopwords.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianAnalyzer.stoptable">
            <summary>
            Contains the stopwords used with the StopFilter.
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianAnalyzer.charset">
            <summary>
            Charset for Russian letters.
            Represents encoding for 32 lowercase Russian letters.
            Predefined charsets can be taken from RussianCharSets class
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianAnalyzer.#ctor">
            <summary>
            Builds an analyzer.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianAnalyzer.#ctor(System.Char[])">
            <summary>
            Builds an analyzer.
            </summary>
            <param name="charset"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianAnalyzer.#ctor(System.Char[],System.String[])">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
            <param name="charset"></param>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianAnalyzer.MakeStopWords(System.Char[])">
            <summary>
            Takes russian stop words and translates them to a String array, using
            the given charset 
            </summary>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianAnalyzer.#ctor(System.Char[],System.Collections.Hashtable)">
            <summary>
            Builds an analyzer with the given stop words.
            </summary>
            <param name="charset"></param>
            <param name="stopwords"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided TextReader.
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns>
            	A TokenStream build from a RussianLetterTokenizer filtered with
                RussianLowerCaseFilter, StopFilter, and RussianStemFilter
             </returns>
        </member>
        <member name="T:Lucene.Net.Analysis.CJK.CJKAnalyzer">
            <summary>
            Filters CJKTokenizer with StopFilter.
            
            <author>Che, Dong</author>
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKAnalyzer.stopWords">
            <summary>
            An array containing some common English words that are not usually
            useful for searching. and some double-byte interpunctions.....
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.CJK.CJKAnalyzer.stopTable">
            <summary>
            stop word list
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.CJK.CJKAnalyzer.#ctor">
            <summary>
            Builds an analyzer which removes words in STOP_WORDS.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.CJK.CJKAnalyzer.#ctor(System.String[])">
            <summary>
            Builds an analyzer which removes words in the provided array.
            </summary>
            <param name="stopWords">stop word array</param>
        </member>
        <member name="M:Lucene.Net.Analysis.CJK.CJKAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            get token stream from input
            </summary>
            <param name="fieldName">lucene field name</param>
            <param name="reader">input reader</param>
            <returns>Token Stream</returns>
        </member>
        <member name="T:Lucene.Net.Analysis.AR.ArabicNormalizationFilter">
            A {@link TokenFilter} that applies {@link ArabicNormalizer} to normalize the orthography.
            
        </member>
        <member name="T:Lucene.Net.Analysis.Ru.RussianLetterTokenizer">
            <summary>
            A RussianLetterTokenizer is a tokenizer that extends LetterTokenizer by additionally looking up letters
            in a given "russian charset". The problem with LeterTokenizer is that it uses Character.isLetter() method,
            which doesn't know how to detect letters in encodings like CP1252 and KOI8
            (well-known problems with 0xD7 and 0xF7 chars)
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.Ru.RussianLetterTokenizer.charset">
            <summary>
            Construct a new LetterTokenizer.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ru.RussianLetterTokenizer.IsTokenChar(System.Char)">
            <summary>
            Collects only characters which satisfy Char.IsLetter(char).
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Lucene.Net.Analysis.De.GermanStemmer">
            <summary>
            A stemmer for German words. The algorithm is based on the report
            "A Fast and Simple Stemming Algorithm for German Words" by JГ¶rg
            Caumanns (joerg.caumanns@isst.fhg.de).
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.De.GermanStemmer.sb">
            <summary>
            Buffer for the terms while stemming them. 
            </summary>
        </member>
        <member name="F:Lucene.Net.Analysis.De.GermanStemmer.substCount">
            <summary>
            Amount of characters that are removed with <tt>Substitute()</tt> while stemming.
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemmer.Stem(System.String)">
            <summary>
            Stemms the given term to an unique <tt>discriminator</tt>.
            </summary>
            <param name="term">The term that should be stemmed.</param>
            <returns>Discriminator for <tt>term</tt></returns>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemmer.IsStemmable(System.String)">
            <summary>
            Checks if a term could be stemmed.
            </summary>
            <param name="term"></param>
            <returns>true if, and only if, the given term consists in letters.</returns>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemmer.Strip(System.Text.StringBuilder)">
            <summary>
            Suffix stripping (stemming) on the current term. The stripping is reduced
            to the seven "base" suffixes "e", "s", "n", "t", "em", "er" and * "nd",
            from which all regular suffixes are build of. The simplification causes
            some overstemming, and way more irregular stems, but still provides unique.
            discriminators in the most of those cases.
            The algorithm is context free, except of the length restrictions.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemmer.Optimize(System.Text.StringBuilder)">
            <summary>
            Does some optimizations on the term. This optimisations are contextual.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Lucene.Net.Analysis.De.GermanStemmer.RemoveParticleDenotion(System.Text.StringBuilder)">
            <summary>
            Removes a particle denotion ("ge") from a term.
            </summary>
            <param name="buffer"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Analysis.De.GermanStemmer.Substitute(System.Text.StringBuilder)" -->
        <member name="M:Lucene.Net.Analysis.De.GermanStemmer.Resubstitute(System.Text.StringBuilder)">
            <summary>
            Undoes the changes made by Substitute(). That are character pairs and
            character combinations. Umlauts will remain as their corresponding vowel,
            as "?" remains as "ss".
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Lucene.Net.Analysis.Cn.ChineseTokenizer">
            <summary>
            Title: ChineseTokenizer
            Description: Extract tokens from the Stream using Character.getType()
                         Rule: A Chinese character as a single token
            Copyright:   Copyright (c) 2001
            Company:
            
            The difference between thr ChineseTokenizer and the
            CJKTokenizer (id=23545) is that they have different
            token parsing logic.
            
            Let me use an example. If having a Chinese text
            "C1C2C3C4" to be indexed, the tokens returned from the
            ChineseTokenizer are C1, C2, C3, C4. And the tokens
            returned from the CJKTokenizer are C1C2, C2C3, C3C4.
            
            Therefore the index the CJKTokenizer created is much
            larger.
            
            The problem is that when searching for C1, C1C2, C1C3,
            C4C2, C1C2C3 ... the ChineseTokenizer works, but the
            CJKTokenizer will not work.
            <author>Yiyi Sun</author>
            <version>$Id: ChineseTokenizer.java, v 1.4 2003/03/02 13:56:03 otis Exp $</version>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Analysis.AR.ArabicNormalizer" -->
        <member name="M:Lucene.Net.Analysis.AR.ArabicNormalizer.Normalize(System.Char[],System.Int32)">
            Normalize an input buffer of Arabic text
            
            @param s input buffer
            @param len length of input buffer
            @return length of input buffer after normalization
        </member>
        <member name="M:Lucene.Net.Analysis.AR.ArabicNormalizer.Delete(System.Char[],System.Int32,System.Int32)">
            Delete a character in-place
            
            @param s Input Buffer
            @param pos Position of character to delete
            @param len length of input buffer
            @return length of input buffer after deletion
        </member>
    </members>
</doc>
